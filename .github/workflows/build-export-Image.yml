name: Build-Export-Image-from-Dockerfile

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Name of the Docker image (without tag)'
        required: true
        default: 'ubuntu-ffmpeg-arm'
      image_tag:
        description: 'Tag of the Docker image'
        required: true
        default: 'v8.0'
      tar_name:
        description: 'Name of the tar file (without .tar extension)'
        required: true
        default: 'ubuntu-ffmpeg-arm'
      platform:
        description: 'Target platform for the Docker image (amd or arm)'
        required: false
        default: 'arm'
      context_dir:
        description: 'Directory containing the Dockerfile (e.g., ., test)'
        required: false
        default: '.'  # 注意：这个默认值现在会被覆盖

jobs:
  build-and-export:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Platform and Dockerfile Path
        id: setup
        run: |
          PLATFORM_INPUT="${{ github.event.inputs.platform || 'amd' }}"
          if [ "$PLATFORM_INPUT" = "amd" ]; then
            FULL_PLATFORM="linux/amd64"
          elif [ "$PLATFORM_INPUT" = "arm" ]; then
            FULL_PLATFORM="linux/arm64"
          else
            echo "Invalid platform: $PLATFORM_INPUT. Must be 'amd' or 'arm'."
            exit 1
          fi
          echo "full_platform=$FULL_PLATFORM" >> $GITHUB_OUTPUT

          CONTEXT_DIR="${{ github.event.inputs.context_dir || '${GITHUB_WORKSPACE}' }}"

          # 查找 dockerfile.<platform> 或 Dockerfile
          if [ -f "$CONTEXT_DIR/dockerfile.$PLATFORM_INPUT" ]; then
            echo "dockerfile_path=$CONTEXT_DIR/dockerfile.$PLATFORM_INPUT" >> $GITHUB_OUTPUT
          elif [ -f "$CONTEXT_DIR/Dockerfile" ]; then
            echo "dockerfile_path=$CONTEXT_DIR/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "No Dockerfile found in $CONTEXT_DIR for platform $PLATFORM_INPUT"
            exit 1
          fi

      # 👇 新增步骤：获取 Dockerfile 所在目录作为构建上下文
      - name: Get Dockerfile Directory as Context
        id: dockerfile_dir
        run: |
          DOCKERFILE_PATH="${{ steps.setup.outputs.dockerfile_path }}"
          CONTEXT_DIR="$(dirname "$DOCKERFILE_PATH")"
          echo "context_dir=$CONTEXT_DIR" >> $GITHUB_OUTPUT

      - name: Build Docker Image for Selected Platform
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.dockerfile_dir.outputs.context_dir }}  # ✅ 使用上一步计算出的目录
          file: ${{ steps.setup.outputs.dockerfile_path }}
          platforms: ${{ steps.setup.outputs.full_platform }}
          tags: ${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}
          push: false
          load: true

      - name: Save Docker Image as Tar
        run: |
          docker save -o ${{ github.event.inputs.tar_name }}.tar ${{ github.event.inputs.image_name }}:${{ github.event.inputs.image_tag }}
          ls -lh ${{ github.event.inputs.tar_name }}.tar

      - name: Upload Docker Image Tar as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.tar_name }}-${{ github.event.inputs.image_tag }}-tar
          path: ${{ github.event.inputs.tar_name }}.tar
          retention-days: 2